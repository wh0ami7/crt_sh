name: Build and Release crt_sh

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - { goos: darwin, goarch: amd64 }
          - { goos: darwin, goarch: arm64 }
          - { goos: windows, goarch: amd64 }
          - { goos: linux, goarch: amd64 }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Install dependencies
        run: go mod download
        if: steps.cache-go-modules.outputs.cache-hit != 'true'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build for ${{ matrix.platform.goos }}-${{ matrix.platform.goarch }}
        env:
          GOOS: ${{ matrix.platform.goos }}
          GOARCH: ${{ matrix.platform.goarch }}
        run: |
          OUTPUT_NAME="crt_sh-$GOOS-$GOARCH"
          if [ "$GOOS" = "windows" ]; then OUTPUT_NAME="crt_sh-$GOOS-$GOARCH.exe"; fi
          go build -v -o "$OUTPUT_NAME" .
          echo "Built $OUTPUT_NAME for $GOOS-$GOARCH"
          echo "OUTPUT_NAME=$OUTPUT_NAME" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: "./${{ env.OUTPUT_NAME }}"

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            Automated release for ${{ github.ref_name }}.
            - Compiled crt_sh for:
              - macOS (Intel x64, ARM64)
              - Windows (x64)
              - Linux (x64)
            - Commit: ${{ github.sha }}

      - name: Upload Release Assets
        run: |
          for artifact in ./artifacts/*; do
            gh release upload ${{ github.ref_name }} "$artifact" --repo ${{ github.repository }} --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}